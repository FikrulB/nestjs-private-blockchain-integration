generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  engineType      = "node"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DB_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Users {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fullName         String             @map("full_name") @db.VarChar(100)
  email            String             @unique @db.VarChar(254)
  emailVerifiedAt  DateTime?          @map("email_verified_at") @db.Timestamp()
  password         String             @db.VarChar(60)
  accountBcAddress String             @unique @map("account_bc_address") @db.Char(42)
  role             Roles
  status           Boolean            @default(true) @db.Boolean
  createdBy        String?            @map("created_by") @db.Uuid
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedBy        String?            @map("updated_by") @db.Uuid
  updatedAt        DateTime?          @updatedAt @map("updated_at") @db.Timestamp()
  deletedBy        String?            @map("deleted_by") @db.Uuid
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamp()
  // Relations
  LogActivity      LogActivities[]
  LogManagements   LogManagements[]
  UserRoleAccess   UserAccessClient[]
  SessionTokens    SessionTokens[]

  @@map("users")
}

model UserAccessClient {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userID   String   @map("user_id") @db.Uuid
  clientID String?  @map("client_id") @db.Uuid
  // Relations
  User     Users    @relation(fields: [userID], references: [id])
  Client   Clients? @relation(fields: [clientID], references: [id])

  @@map("user_access_client")
}

model Clients {
  id             String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String             @db.VarChar(100)
  contactEmail   String             @map("contact_email") @db.VarChar(254)
  contactPhone   String             @map("contact_phone") @db.VarChar(20)
  createdBy      String             @map("created_by") @db.Uuid
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedBy      String?            @map("updated_by") @db.Uuid
  updatedAt      DateTime?          @updatedAt @map("updated_at") @db.Timestamp()
  // Relations
  ApiManagements ApiManagements[]
  UserRoleAccess UserAccessClient[]

  @@map("clients")
}

model ApiManagements {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  apiKey    String    @unique @map("api_key") @db.Char(64)
  clientID  String    @map("client_id") @db.Uuid
  startAt   DateTime? @map("start_at") @db.Timestamp()
  endAt     DateTime? @map("end_at") @db.Timestamp()
  createdBy String?   @map("created_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedBy String?   @map("updated_by") @db.Uuid
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp()
  deletedBy String?   @map("deleted_by") @db.Uuid
  deletedAt DateTime? @map("deleted_at") @db.Timestamp()
  // Relations
  Client    Clients   @relation(fields: [clientID], references: [id])

  @@map("api_managements")
}

model LogActivities {
  id        String   @id @default(uuid()) @db.Uuid
  activity  String   @db.VarChar(100)
  userAgent String?  @map("user_agent") @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  createdBy String   @map("created_by") @db.Uuid
  // Relations
  Users     Users    @relation(fields: [createdBy], references: [id])

  @@map("log_activities")
}

model LogManagements {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  activity         String   @db.VarChar(100)
  accountBcAddress String   @map("account_bc_address") @db.Char(42)
  userEmail        String   @map("user_email") @db.VarChar(254)
  userAgent        String   @map("user_agent") @db.VarChar(500)
  userIP           String   @map("user_ip") @db.VarChar(40)
  data             Json     @map("data") @db.Json
  interactTo       String   @map("interact_to") @db.VarChar(42)
  txHash           String   @map("tx_hash") @db.VarChar(70)
  createdBy        String   @map("created_by") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp()
  // Relations
  Users            Users    @relation(fields: [createdBy], references: [id])

  @@map("log_managements")
}

model SessionTokens {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accessToken      String    @unique @map("access_token") @db.VarChar(512)
  expiresAccessAt  DateTime  @map("expires_access_at") @db.Timestamp()
  refreshToken     String    @unique @map("refresh_token") @db.VarChar(512)
  expiresRefreshAt DateTime  @map("expires_refresh_at") @db.Timestamp()
  isRevoked        Boolean   @default(false) @map("is_revoked") @db.Boolean
  createdBy        String    @map("created_by") @db.Uuid
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamp()
  // Relations
  User             Users     @relation(fields: [createdBy], references: [id])

  @@map("session_tokens")
}

enum Roles {
  OWNER
  ADMIN
  USER
}
